let validate=require("validate.js"),{PasswordTolerance}=require("./passwordTolerance"),{loginFetch,generateHashCash}=require("./utils"),{loginConstraints,passwordToleranConstraints}=require("./serverInstructions");class Signum{static async executeLogin(e,s,n,r,t,a,i = "",l = loginFetch){if(!e){throw new Error("Username is null or empty")}if(!s){throw new Error("Passtext is null or empty")}if(!n){throw new Error("loginUrl is null or empty")}let o=validate.single(n,{url:{allowLocal:!0}});if(o){throw new Error(`Bad loginUrl: ${n} ${JSON.stringify(o)}`)}if(!r){throw new Error("serverInstructions is null or empty")}if(!t){throw new Error("referer is null or empty")}if(!a){throw new Error("state is null or empty")}let h=validate(r,loginConstraints,{format:"flat"});if(h){throw new Error(`Bad serverInstructions: ${JSON.stringify(h)}`)}let u={'Content-Type':'application/json;charset=utf-8','X-Username':e,'X-hashed-Passtext':s};r.hashcash&&r.hashcash.require&&(u['X-Hashcash']=await generateHashCash(r.hashcash.zeroCount,r.hashcash.serverString));if(r.csrfToken&&r.csrfToken.require){if(!i){throw new Error("csrfToken is null or empty")}u['X-Csrf-Token']=i}return await l(n,{method:'POST',headers:u,body:a,referrer:t})}static normalizePassphrase(e,s){if(!e){throw new Error("Passphrase is null or empty")}if(!s){throw new Error("serverInstructions is null or empty")}let n=validate(s,passwordToleranConstraints,{format:"flat"});if(n){throw new Error(`Bad serverInstructions: ${JSON.stringify(n)}`)}s.normalizers&&e.length>=s.passphraseMinimalLength&&(e=new PasswordTolerance(e,s.normalizers).normalize());return e}}exports.Signum=Signum
